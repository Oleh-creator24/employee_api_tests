import requests
import json


class EmployeeAPITester:
    def __init__(self, base_url="http://localhost:5000"):
        self.base_url = base_url
        self.employees_url = f"{base_url}/api/employees"
        self.created_employee_id = None

    def check_server_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = requests.get(f"{self.base_url}/api/health", timeout=5)
            return response.status_code == 200
        except requests.exceptions.RequestException:
            return False

    def print_test_result(self, test_name, success, response=None):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{status} | {test_name}")

        if response is not None and not success:
            print(f"   –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
            if response.text:
                try:
                    error_data = response.json()
                    print(f"   –û—à–∏–±–∫–∞: {error_data}")
                except:
                    print(f"   –û—Ç–≤–µ—Ç: {response.text}")

    def test_get_all_employees(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        response = requests.get(self.employees_url)
        success = response.status_code == 200

        if success:
            employees = response.json()
            print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(employees)}")

        self.print_test_result("GET –í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", success, response)
        return success

    def test_get_employee_by_id(self, employee_id=1):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ ID"""
        response = requests.get(f"{self.employees_url}/{employee_id}")
        success = response.status_code == 200

        if success:
            employee = response.json()
            print(f"   üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee['name']} ({employee['position']})")

        self.print_test_result(f"GET –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ID={employee_id}", success, response)
        return success

    def test_create_employee(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        new_employee = {
            "name": "–ê–ª–µ–∫—Å–µ–π –¢–µ—Å—Ç–æ–≤",
            "position": "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫",
            "salary": 75000,
            "department": "QA"
        }

        response = requests.post(self.employees_url, json=new_employee)
        success = response.status_code == 201

        if success:
            created_employee = response.json()
            self.created_employee_id = created_employee['id']
            print(f"   üë§ –°–æ–∑–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ID={self.created_employee_id}")

        self.print_test_result("POST –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", success, response)
        return success

    def test_update_employee(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        if not self.created_employee_id:
            print("   ‚ö†Ô∏è –ù–µ—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return False

        updated_data = {
            "name": "–ê–ª–µ–∫—Å–µ–π –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π",
            "position": "–°—Ç–∞—Ä—à–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫",
            "salary": 85000
        }

        response = requests.put(
            f"{self.employees_url}/{self.created_employee_id}",
            json=updated_data
        )
        success = response.status_code == 200

        if success:
            updated_employee = response.json()
            print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {updated_employee['name']}")

        self.print_test_result(f"PUT –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ID={self.created_employee_id}", success, response)
        return success

    def test_delete_employee(self):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        if not self.created_employee_id:
            print("   ‚ö†Ô∏è –ù–µ—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è")
            return False

        response = requests.delete(f"{self.employees_url}/{self.created_employee_id}")
        success = response.status_code == 200

        if success:
            print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ID={self.created_employee_id}")

        self.print_test_result(f"DELETE –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ID={self.created_employee_id}", success, response)
        return success

    def test_nonexistent_employee(self):
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        response = requests.get(f"{self.employees_url}/9999")
        success = response.status_code == 404

        self.print_test_result("GET –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫", success, response)
        return success

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ö–ê–õ–¨–ù–û–ì–û EMPLOYEE API")
        print("=" * 50)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
        if not self.check_server_health():
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —Å–Ω–∞—á–∞–ª–∞.")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python simple_employee_api_server.py")
            return False

        print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        print()

        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        tests = [
            self.test_get_all_employees,
            self.test_get_employee_by_id,
            self.test_create_employee,
            self.test_update_employee,
            self.test_nonexistent_employee,
            self.test_delete_employee
        ]

        results = []
        for test in tests:
            result = test()
            results.append(result)
            print()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        passed = sum(results)
        total = len(results)

        print("=" * 50)
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} –ø—Ä–æ–π–¥–µ–Ω–æ")

        if passed == total:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")

        return passed == total


if __name__ == "__main__":
    tester = EmployeeAPITester()
    tester.run_all_tests()